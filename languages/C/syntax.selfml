(root source.c
    (include @preprocessor-rule-enabled)
    (include @preprocessor-rule-disabled)
    (include @preprocessor-rule-other)
    (include @comments)
    (zone keyword.control.c
        (match
            (list break case continue default do else for goto if _Pragma return switch while)
            (boundary.both)))
    (zone storage.type.c
        (match
            (list asm __asm__ auto bool _Bool char _Complex double enum float _Imaginary int long short signed struct typedef union unsigned void)
            (boundary.both)))
    (zone storage.modifier.c
        (match
            (list const extern register restrict static volatile inline)
            (boundary.both)))
    (zone constant.other.variable.mac-classic.c
        (match
            (regex [\bk[A-Z]\w*\b])))
    (zone variable.other.readwrite.global.mac-classic.c
        (match
            (regex [\bg[A-Z]\w*\b])))
    (zone variable.other.readwrite.static.mac-classic.c
        (match
            (regex [\bs[A-Z]\w*\b])))
    (zone constant.language.c
        (match
            (list NULL true false TRUE FALSE)
            (boundary.both)))
    (include @sizeof)
    (zone constant.numeric.c
        (match
            (regex [\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b])))
    (zone string.quoted.double.c
        (start
            (regex "
                (0 punctuation.definition.string.begin.c)))
        (end
            (regex "
                (0 punctuation.definition.string.end.c)))
        (subzones
            (include @string_escaped_char)
            (include @string_placeholder)))
    (zone string.quoted.single.c
        (start
            (regex '
                (0 punctuation.definition.string.begin.c)))
        (end
            (regex '
                (0 punctuation.definition.string.end.c)))
        (subzones
            (include @string_escaped_char)))
    (zone meta.preprocessor.macro.c
        (start
            (regex [(?x)
        		^\s*\#\s*(define)\s+             # define
        		((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
        		(?:                              # and optionally:
        		    (\()                         # an open parenthesis
        		        (
        		            \s* \g<id> \s*       # first argument
        		            ((,) \s* \g<id> \s*)*  # additional arguments
        		            (?:\.\.\.)?          # varargs ellipsis?
        		        )
        		    (\))                         # a close parenthesis
        		)?
        	]
                (7 punctuation.separator.parameters.c)
                (8 punctuation.definition.parameters.c)
                (4 punctuation.definition.parameters.c)
                (5 variable.parameter.preprocessor.c)
                (1 keyword.control.import.define.c)
                (2 entity.name.function.preprocessor.c)))
        (end
            (regex [(?=(?://|/\*))|$]))
        (subzones
            (zone punctuation.separator.continuation.c
                (match
                    (regex [(?>\\\s*\n)])))
            (include $base)))
    (zone meta.preprocessor.diagnostic.c
        (start
            (regex [^\s*#\s*(error|warning)\b]
                (1 keyword.control.import.error.c)))
        (end
            (regex $
                (1 keyword.control.import.error.c)))
        (subzones
            (zone punctuation.separator.continuation.c
                (match
                    (regex [(?>\\\s*\n)])))))
    (zone meta.preprocessor.c.include
        (start
            (regex [^\s*#\s*(include|import)\b\s+]
                (1 keyword.control.import.include.c)))
        (end
            (regex [(?=(?://|/\*))|$]
                (1 keyword.control.import.include.c)))
        (subzones
            (zone punctuation.separator.continuation.c
                (match
                    (regex [(?>\\\s*\n)])))
            (zone string.quoted.double.include.c
                (start
                    (regex "
                        (0 punctuation.definition.string.begin.c)))
                (end
                    (regex "
                        (0 punctuation.definition.string.end.c))))
            (zone string.quoted.other.lt-gt.include.c
                (start
                    (regex <
                        (0 punctuation.definition.string.begin.c)))
                (end
                    (regex >
                        (0 punctuation.definition.string.end.c))))))
    (include @pragma-mark)
    (zone meta.preprocessor.c
        (start
            (regex [^\s*#\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\b]
                (1 keyword.control.import.c)))
        (end
            (regex [(?=(?://|/\*))|$]
                (1 keyword.control.import.c)))
        (subzones
            (zone punctuation.separator.continuation.c
                (match
                    (regex [(?>\\\s*\n)])))))
    (zone support.type.sys-types.c
        (match
            (list u_char u_short u_int u_long ushort uint u_quad_t quad_t qaddr_t caddr_t daddr_t dev_t fixpt_t blkcnt_t blksize_t gid_t in_addr_t in_port_t ino_t key_t mode_t nlink_t id_t pid_t off_t segsz_t swblk_t uid_t id_t clock_t size_t ssize_t time_t useconds_t suseconds_t)
            (boundary.both)))
    (zone support.type.pthread.c
        (match
            (list pthread_attr_t pthread_cond_t pthread_condattr_t pthread_mutex_t pthread_mutexattr_t pthread_once_t pthread_rwlock_t pthread_rwlockattr_t pthread_t pthread_key_t)
            (boundary.both)))
    (zone support.type.stdint.c
        (match
            (list int8_t int16_t int32_t int64_t uint8_t uint16_t uint32_t uint64_t int_least8_t int_least16_t int_least32_t int_least64_t uint_least8_t uint_least16_t uint_least32_t uint_least64_t int_fast8_t int_fast16_t int_fast32_t int_fast64_t uint_fast8_t uint_fast16_t uint_fast32_t uint_fast64_t intptr_t uintptr_t intmax_t intmax_t uintmax_t uintmax_t)
            (boundary.both)))
    (zone support.constant.mac-classic.c
        (match
            (list noErr kNilOptions kInvalidID kVariableLengthArray)
            (boundary.both)))
    (zone support.type.mac-classic.c
        (match
            (list AbsoluteTime Boolean Byte ByteCount ByteOffset BytePtr CompTimeValue ConstLogicalAddress ConstStrFileNameParam ConstStringPtr Duration Fixed FixedPtr Float32 Float32Point Float64 Float80 Float96 FourCharCode Fract FractPtr Handle ItemCount LogicalAddress OptionBits OSErr OSStatus OSType OSTypePtr PhysicalAddress ProcessSerialNumber ProcessSerialNumberPtr ProcHandle Ptr ResType ResTypePtr ShortFixed ShortFixedPtr SignedByte SInt16 SInt32 SInt64 SInt8 Size StrFileName StringHandle StringPtr TimeBase TimeRecord TimeScale TimeValue TimeValue64 UInt16 UInt32 UInt64 UInt8 UniChar UniCharCount UniCharCountPtr UniCharPtr UnicodeScalarValue UniversalProcHandle UniversalProcPtr UnsignedFixed UnsignedFixedPtr UnsignedWide UTF16Char UTF32Char UTF8Char)
            (boundary.both)))
    (include @block)
    (zone meta.function.c
        (start
            (regex [(?x)
    		(?:  ^                                 # begin-of-line
    		  |  
    		     (?: (?= \s )           (?<!else|new|return) (?<=\w)      #  or word + space before name
    		       | (?= \s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name
    		     )
    		)
    		(\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\s*\()
    		(
    			(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name
    			(?: (?<=operator) (?: [-*&<>=+!]+ | \(\) | \[\] ) )  # if it is a C++ operator
    		)
    		 \s*(?=\()]
                (3 entity.name.function.c)
                (4 punctuation.definition.parameters.c)
                (1 punctuation.whitespace.function.leading.c)))
        (end
            (regex [(?<=\})|(?=#)|(;)]))
        (subzones
            (include @comments)
            (include @parens)
            (zone storage.modifier.c
                (match const
                    (boundary.both)))
            (include @block))))

(collection preprocessor-rule-other-block
    (zone
        (start
            (regex [^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))]
                (1 meta.preprocessor.c)
                (2 keyword.control.import.c)))
        (end
            (regex [^\s*(#\s*(endif)\b).*$]
                (1 meta.preprocessor.c)
                (2 keyword.control.import.c)))
        (subzones
            (include @block_innards))))

(collection comments
    (zone comment.block.c
        (match
            (regex [^/\* =(\s*.*?)\s*= \*/$\n?]
                (1 meta.toc-list.banner.block.c))))
    (zone comment.block.c
        (start
            (regex /\*
                (0 punctuation.definition.comment.c)))
        (end
            (regex \*/
                (0 punctuation.definition.comment.c))))
    (zone invalid.illegal.stray-comment-end.c
        (match
            (regex \*/.*\n)))
    (zone comment.line.banner.c++
        (match
            (regex [^// =(\s*.*?)\s*=\s*$\n?]
                (1 meta.toc-list.banner.line.c))))
    (zone comment.line.double-slash.c++
        (start
            (regex //
                (0 punctuation.definition.comment.c)))
        (end
            (regex $\n?))
        (subzones
            (zone punctuation.separator.continuation.c++
                (match
                    (regex [(?>\\\s*\n)]))))))

(collection preprocessor-rule-enabled
    (zone
        (start
            (regex [^\s*(#(if)\s+(0*1)\b)]
                (3 constant.numeric.preprocessor.c)
                (1 meta.preprocessor.c)
                (2 keyword.control.import.if.c)))
        (end
            (regex [^\s*(#\s*(endif)\b)]
                (3 constant.numeric.preprocessor.c)
                (1 meta.preprocessor.c)
                (2 keyword.control.import.if.c)))
        (subzones
            (zone
                (inner-identifier comment.block.preprocessor.else-branch)
                (start
                    (regex [^\s*(#\s*(else)\b).*]
                        (1 meta.preprocessor.c)
                        (2 keyword.control.import.else.c)))
                (end
                    (regex [(?=^\s*#\s*endif\b.*$)]
                        (1 meta.preprocessor.c)
                        (2 keyword.control.import.else.c)))
                (subzones
                    (include @disabled)
                    (include @pragma-mark)))
            (zone
                (start
                    (regex []))
                (end
                    (regex [(?=^\s*#\s*(else|endif)\b.*$)]))
                (subzones
                    (include $base))))))

(collection block_innards
    (include @preprocessor-rule-enabled-block)
    (include @preprocessor-rule-disabled-block)
    (include @preprocessor-rule-other-block)
    (include @sizeof)
    (include @access)
    (zone
        (match
            (regex [(\s*)\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\b]
                (1 punctuation.whitespace.support.function.leading.c)
                (2 support.function.C99.c))))
    (zone meta.function-call.c
        (match
            (regex [(?x) (?: (?= \s )  (?:(?<=else|new|return) | (?<!\w)) (\s+))?
			(\b 
				(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\s*\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\b | :: )++                  # actual name
			)
			 \s*(\()]
                (3 punctuation.definition.parameters.c)
                (1 punctuation.whitespace.function-call.leading.c)
                (2 support.function.any-method.c))))
    (zone meta.initialization.c
        (match
            (regex [(?x)
			        (?x)
			(?:  
			     (?: (?= \s )           (?<!else|new|return) (?<=\w)\s+      #  or word + space before name
			     )
			)
			(
				(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name
				(?: (?<=operator) (?: [-*&<>=+!]+ | \(\) | \[\] ) )?  # if it is a C++ operator
			)
			 \s*(\()]
                (1 variable.other.c)
                (2 punctuation.definition.parameters.c))))
    (include @block)
    (include $base))

(collection access
    (zone variable.other.dot-access.c
        (match
            (regex [\.[a-zA-Z_][a-zA-Z_0-9]*\b(?!\s*\()]))))

(collection pragma-mark
    (zone meta.section
        (match
            (regex [^\s*(#\s*(pragma\s+mark)\s+(.*))]
                (3 meta.toc-list.pragma-mark.c)
                (1 meta.preprocessor.c)
                (2 keyword.control.import.pragma.c)))))

(collection string_escaped_char
    (zone constant.character.escape.c
        (match
            (regex [\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})])))
    (zone invalid.illegal.unknown-escape.c
        (match
            (regex \\.))))

(collection disabled
    (zone
        (start
            (regex [^\s*#\s*if(n?def)?\b.*$]))
        (end
            (regex [^\s*#\s*endif\b.*$]))
        (subzones
            (include @disabled)
            (include @pragma-mark))))

(collection preprocessor-rule-disabled
    (zone
        (start
            (regex [^\s*(#(if)\s+(0)\b).*]
                (3 constant.numeric.preprocessor.c)
                (1 meta.preprocessor.c)
                (2 keyword.control.import.if.c)))
        (end
            (regex [^\s*(#\s*(endif)\b)]
                (3 constant.numeric.preprocessor.c)
                (1 meta.preprocessor.c)
                (2 keyword.control.import.if.c)))
        (subzones
            (zone
                (start
                    (regex [^\s*(#\s*(else)\b)]
                        (1 meta.preprocessor.c)
                        (2 keyword.control.import.else.c)))
                (end
                    (regex [(?=^\s*#\s*endif\b.*$)]
                        (1 meta.preprocessor.c)
                        (2 keyword.control.import.else.c)))
                (subzones
                    (include $base)))
            (zone comment.block.preprocessor.if-branch
                (start
                    (regex []))
                (end
                    (regex [(?=^\s*#\s*(else|endif)\b.*$)]))
                (subzones
                    (include @disabled)
                    (include @pragma-mark))))))

(collection preprocessor-rule-disabled-block
    (zone
        (start
            (regex [^\s*(#(if)\s+(0)\b).*]
                (3 constant.numeric.preprocessor.c)
                (1 meta.preprocessor.c)
                (2 keyword.control.import.if.c)))
        (end
            (regex [^\s*(#\s*(endif)\b)]
                (3 constant.numeric.preprocessor.c)
                (1 meta.preprocessor.c)
                (2 keyword.control.import.if.c)))
        (subzones
            (zone
                (start
                    (regex [^\s*(#\s*(else)\b)]
                        (1 meta.preprocessor.c)
                        (2 keyword.control.import.else.c)))
                (end
                    (regex [(?=^\s*#\s*endif\b.*$)]
                        (1 meta.preprocessor.c)
                        (2 keyword.control.import.else.c)))
                (subzones
                    (include @block_innards)))
            (zone comment.block.preprocessor.if-branch.in-block
                (start
                    (regex []))
                (end
                    (regex [(?=^\s*#\s*(else|endif)\b.*$)]))
                (subzones
                    (include @disabled)
                    (include @pragma-mark))))))

(collection parens
    (zone meta.parens.c
        (start
            (regex [\(]))
        (end
            (regex [\)]))
        (subzones
            (include $base))))

(collection string_placeholder
    (zone constant.other.placeholder.c
        (match
            (regex [(?x)%
    						(\d+\$)?                             # field (argument #)
    						[#0\- +']*                           # flags
    						[,;:_]?                              # separator character (AltiVec)
    						((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
    						(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
    						(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
    						[diouxXDOUeEfFgGaACcSspn%]           # conversion type
    					])))
    (zone invalid.illegal.placeholder.c
        (match %)))

(collection sizeof
    (zone keyword.operator.sizeof.c
        (match
            (list sizeof)
            (boundary.both))))

(collection block
    (zone meta.block.c
        (start
            (regex [\{]))
        (end
            (regex [\}]))
        (subzones
            (include @block_innards))))

(collection preprocessor-rule-enabled-block
    (zone
        (start
            (regex [^\s*(#(if)\s+(0*1)\b)]
                (3 constant.numeric.preprocessor.c)
                (1 meta.preprocessor.c)
                (2 keyword.control.import.if.c)))
        (end
            (regex [^\s*(#\s*(endif)\b)]
                (3 constant.numeric.preprocessor.c)
                (1 meta.preprocessor.c)
                (2 keyword.control.import.if.c)))
        (subzones
            (zone
                (inner-identifier comment.block.preprocessor.else-branch.in-block)
                (start
                    (regex [^\s*(#\s*(else)\b).*]
                        (1 meta.preprocessor.c)
                        (2 keyword.control.import.else.c)))
                (end
                    (regex [(?=^\s*#\s*endif\b.*$)]
                        (1 meta.preprocessor.c)
                        (2 keyword.control.import.else.c)))
                (subzones
                    (include @disabled)
                    (include @pragma-mark)))
            (zone
                (start
                    (regex []))
                (end
                    (regex [(?=^\s*#\s*(else|endif)\b.*$)]))
                (subzones
                    (include @block_innards))))))

(collection preprocessor-rule-other
    (zone
        (start
            (regex [^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))]
                (1 meta.preprocessor.c)
                (2 keyword.control.import.c)))
        (end
            (regex [^\s*(#\s*(endif)\b).*$]
                (1 meta.preprocessor.c)
                (2 keyword.control.import.c)))
        (subzones
            (include $base))))